const userData = {
  'USD': 1000,
  'EUR': 900,
  'UAH': 15000,
  'BIF': 20000,
  'AOA': 100
};

const bankData = {
  'USD': {
    max: 3000,
    min: 100,
    img: 'üíµ'
  },
  'EUR': {
    max: 1000,
    min: 50,
    img: 'üí∂'
  },
  'UAH': {
    max: 0,
    min: 0,
    img: 'üí¥'
  },
  'GBP': {
    max: 10000,
    min: 100,
    img: 'üí∑'
  }
};

function getUserInput(promptMessage, validationCallback) {
  let userInput;
  do {
    userInput = prompt(promptMessage).toUpperCase();
  } while (!validationCallback(userInput));
  return userInput;
}

function validateCurrency(currency) {
  return userData.hasOwnProperty(currency);
}

function validateWithdrawalCurrency(currency) {
  return bankData.hasOwnProperty(currency);
}

function validateWithdrawalAmount(amount) {
  return !isNaN(amount) && amount !== null;
}

function getMoney(userData, bankData) {
  return new Promise((resolve, reject) => {
    const viewBalanceQuestion = '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã?';
    const confirm = window.confirm(viewBalanceQuestion);

    if (confirm) {
      const currency = getUserInput('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞:', validateCurrency);
      const balance = userData[currency];
      alert(`–ë–∞–ª–∞–Ω—Å: ${balance} ${currency}`);
    } else {
      const withdrawCurrency = getUserInput('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å:', validateWithdrawalCurrency);
      const currencyInfo = bankData[withdrawCurrency];

      let withdrawAmount = parseFloat(getUserInput('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è:', validateWithdrawalAmount));

      if (withdrawAmount > currencyInfo.max || withdrawAmount < currencyInfo.min) {
        const message = withdrawAmount > currencyInfo.max ?
          `–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –±–æ–ª—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è: ${currencyInfo.max}`:
          `–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è: ${currencyInfo.min}`;

        alert(message);
        alert('–°–ø–∞—Å–∏–±–æ, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä');
        throw new Error({ userData, bankData });
      }

      alert(`–í–æ—Ç –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏: ${withdrawAmount} ${withdrawCurrency} ${currencyInfo.img}`);
    }

    alert('–°–ø–∞—Å–∏–±–æ, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä');
    resolve(userData);
  });
}

getMoney(userData, bankData)
  .then(() => console.log('–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.'))
  .catch(({ userData, bankData }) => console.log('–°–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ.'));